{
  "version": 3,
  "sources": ["../../src/Settings.ts", "../../src/Bookmarks.ts", "../../src/utils.ts", "../../src/View.ts", "../../src/index.ts"],
  "sourcesContent": ["export enum BooleanSetting {\n  YES = \"yes\",\n  NO = \"no\"\n}\n\nexport enum SizeSetting {\n  SMALL = \"small\",\n  MEDIUM = \"medium\",\n  LARGE = \"large\",\n}\n\nexport type SettingsProps = {\n  firstRun: boolean,\n  rootFolderName: string,\n  bookmarksWidth: string,\n  bookmarkItemIcon: BooleanSetting,\n  bookmarkItemSize: SizeSetting,\n  bookmarksShowSubfolders: BooleanSetting,\n  bookmarksReordering: BooleanSetting,\n  bookmarksSearchBar: BooleanSetting\n  // [key: string]: boolean | string | BooleanSetting\n}\n\ntype SettingsWithBooleanValue = Pick<SettingsProps, \"bookmarkItemIcon\" | \"bookmarksShowSubfolders\" | \"bookmarksReordering\" | \"bookmarksSearchBar\">;\n\n\n/**\n * Settings manager (LocalStorage).\n */\nexport class Settings {\n  static SETTINGS_ROOT_KEY = \"newtab-bookmarks\";\n  public settings: SettingsProps = Object.create(null);\n\n  constructor() {\n    this.settings = {\n      firstRun: true,\n      rootFolderName: '',\n      bookmarksWidth: 'full-screen',\n      bookmarkItemIcon: BooleanSetting.YES,\n      bookmarkItemSize: SizeSetting.SMALL,\n      bookmarksShowSubfolders: BooleanSetting.NO,\n      bookmarksReordering: BooleanSetting.YES,\n      bookmarksSearchBar: BooleanSetting.YES\n    };\n  }\n\n  /**\n   * Initialize the Local Storage key to keep the settings object.\n   */\n  async init() {\n    const settings = await chrome.storage.local.get(Settings.SETTINGS_ROOT_KEY) || Object.create(null);\n    this.settings = {...this.settings, ...settings[Settings.SETTINGS_ROOT_KEY]};\n    return this;\n  }\n\n  isOn(settingName: string) {\n    return this.settings[settingName as keyof SettingsWithBooleanValue] === BooleanSetting.YES;\n  }\n\n  isOff(settingName: string) {\n    const settingValue = this.settings[settingName as keyof SettingsWithBooleanValue];\n    return !settingValue || settingValue === BooleanSetting.NO;\n  }\n\n  getValue<K extends keyof SettingsProps>(settingName: K): SettingsProps[K] {\n    return this.settings[settingName];\n  }\n\n  setValue<K extends keyof SettingsProps, T extends SettingsProps[K]>(settingName: K, settingValue: T) {\n    this.settings[settingName] = settingValue;\n  }\n\n  async saveOne<K extends keyof SettingsProps, T extends SettingsProps[K]>(key: K, value: T) {\n    this.setValue(key, value);\n    await this.save();\n  }\n\n  getAll() {\n    return this.settings;\n  }\n\n  async save(newSettings?: Partial<SettingsProps>) {\n    if (newSettings) {\n      await chrome.storage.local.set({[Settings.SETTINGS_ROOT_KEY]: {...this.settings, ...newSettings, ...{firstRun: false}}});\n    } else {\n      await chrome.storage.local.set({[Settings.SETTINGS_ROOT_KEY]: {...this.settings}});\n    }\n  }\n}\n", "import {Settings} from \"./Settings\";\n\nexport class Bookmarks {\n  public bookmarks: chrome.bookmarks.BookmarkTreeNode[] = [];\n\n  constructor(public settings: Settings) {\n    this.settings = settings;\n  }\n\n  async init() {\n    this.bookmarks = await chrome.bookmarks.getTree();\n    return this;\n  }\n\n  async add(parentId: string, title: string, url: string) {\n    return await chrome.bookmarks.create({parentId, title, url});\n  }\n\n  async remove(id: string) {\n    return await chrome.bookmarks.remove(id);\n  }\n\n  async move(id: string, index: string, parentId: string) {\n    return await chrome.bookmarks.move(id, {index: Number(index), parentId});\n  }\n\n  async addFolder(parentId: string, title: string) {\n    return await chrome.bookmarks.create({parentId, title});\n  }\n\n  getStartPageBookmarks() {\n    const rootFolderName = this.settings.getValue(\"rootFolderName\");\n    const rootBookmarkTreeNode = this.bookmarks[0];\n    if (typeof rootBookmarkTreeNode === \"undefined\") {\n      return null;\n    }\n    return Bookmarks.getBookmarksFromFolder(rootFolderName, rootBookmarkTreeNode);\n  }\n\n  static getBookmarksFromFolder(folderName: string, treeItem: chrome.bookmarks.BookmarkTreeNode): chrome.bookmarks.BookmarkTreeNode | null {\n    // No folder name set OR folder name is empty.\n    if (typeof folderName !== \"string\" || folderName.trim().length === 0) {\n      return null;\n    }\n\n    // Found the folder name that the user has requested.\n    if (folderName === treeItem.title) {\n      return treeItem;\n    }\n\n    const childTreeNodes = treeItem.children;\n    if (typeof childTreeNodes === \"undefined\" || childTreeNodes.length === 0) {\n      return null;\n    }\n\n    let result = null;\n    for (let i = 0; i < childTreeNodes.length; i++) {\n      const childTreeNode = childTreeNodes[i];\n      if (childTreeNode) {\n        result = Bookmarks.getBookmarksFromFolder(folderName, childTreeNode);\n        if (result !== null) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static searchRecursive(query: string, treeItem: chrome.bookmarks.BookmarkTreeNode): chrome.bookmarks.BookmarkTreeNode[] {\n    let results: chrome.bookmarks.BookmarkTreeNode[] = [];\n\n    // No valid query.\n    if (typeof query !== \"string\" || query.trim().length < 3) {\n      return results;\n    }\n\n    if (treeItem.title.toLowerCase().search(query.toLowerCase()) !== -1) {\n      results.push(treeItem);\n    }\n\n    const childTreeNodes = treeItem.children;\n    if (typeof childTreeNodes === \"undefined\" || childTreeNodes.length === 0) {\n      return results;\n    }\n\n\n    for (let i = 0; i < childTreeNodes.length; i++) {\n      const childTreeNode = childTreeNodes[i];\n      if (childTreeNode) {\n        const result = Bookmarks.searchRecursive(query, childTreeNode);\n        if (result !== null) {\n          results = results.concat(result)\n        }\n      }\n    }\n\n\n    return results;\n  }\n\n  search(query: string) {\n    const rootTreeNode = this.bookmarks[0];\n    if (typeof rootTreeNode === \"undefined\") {\n      return [];\n    }\n    return Bookmarks.searchRecursive(query, rootTreeNode);\n  }\n}\n", "/**\n * Utilities (DOM selectors, etc)\n */\nexport function $<T extends HTMLElement>(id: string): T {\n  return document.getElementById(id) as T;\n}\n\nexport function $q(cssSelector: string) {\n  return document.querySelector(cssSelector) as Element;\n}\n\nexport function $$q(cssSelector: string) {\n  return document.querySelectorAll(cssSelector);\n}\n\nexport function faviconURL(u: string, imgSize: string) {\n  const url = new URL(chrome.runtime.getURL(\"/_favicon/\"));\n  url.searchParams.set(\"pageUrl\", u);\n  url.searchParams.set(\"size\", imgSize || \"16\");\n  return url.toString();\n}\n\n", "import {BooleanSetting, Settings, SettingsProps, SizeSetting} from \"./Settings\";\nimport {Bookmarks} from \"./Bookmarks\";\nimport {$, $$q, faviconURL} from \"./utils\";\nimport BookmarkTreeNode = chrome.bookmarks.BookmarkTreeNode;\n\nexport class View {\n  constructor(private settings: Settings, private bookmarks: Bookmarks) {\n  }\n\n  renderBookmark(bookmark: BookmarkTreeNode, size: number, isDraggable: boolean) {\n    const $bookmark = document.createElement(\"div\");\n    // Keep \"id\" for later sorting operations.\n    $bookmark.dataset.index = bookmark.index?.toString();\n    $bookmark.dataset.id = bookmark.id;\n    $bookmark.dataset.parentId = bookmark.parentId;\n\n    $bookmark.classList.add(\"bookmark\");\n    $bookmark.classList.add(\"flex-item\");\n    $bookmark.addEventListener(\"click\", () => {\n      $bookmark.classList.add(\"loading\");\n      setTimeout(() => {\n        window.location.href = bookmark.url || '';\n      }, 0);\n\n    });\n\n    // Handle drag\n    if (isDraggable) {\n      $bookmark.setAttribute(\"draggable\", \"true\");\n      $bookmark.addEventListener(\"drag\", (e: DragEvent) => {\n        const selectedItem = e.target as HTMLElement;\n        if (!selectedItem) {\n          return;\n        }\n\n        const x = e.clientX, y = e.clientY;\n\n        selectedItem.classList.add('drag-sort-active');\n        let swapItem = (document.elementFromPoint(x, y) === null ? selectedItem : document.elementFromPoint(x, y)) as HTMLElement;\n        const list = selectedItem.parentNode;\n\n        if (!swapItem || !list) {\n          return;\n        }\n\n        if (swapItem !== selectedItem && list === swapItem.parentNode) {\n          swapItem = swapItem !== selectedItem.nextSibling as HTMLElement ? swapItem : swapItem.nextSibling as HTMLElement;\n          list.insertBefore(selectedItem, swapItem);\n          selectedItem.dataset.indexSwap = swapItem.dataset.index;\n          selectedItem.dataset.parentIdSwap = swapItem.dataset.parentId;\n          // console.log(selectedItem.innerText, swapItem.innerText);\n        }\n      });\n      $bookmark.addEventListener(\"dragend\", (e) => {\n        const selectedItem = e.target as HTMLElement;\n        selectedItem.classList.remove('drag-sort-active');\n        // Re-order in Chrome.\n        this.bookmarks.move(selectedItem.dataset.id || '', selectedItem.dataset.indexSwap || '', selectedItem.dataset.parentIdSwap || '');\n        delete selectedItem.dataset.indexSwap;\n        delete selectedItem.dataset.parentIdSwap;\n      });\n    }\n\n    // Img.\n    const $bookmarkImg = document.createElement('img');\n    $bookmarkImg.src = faviconURL(bookmark.url || '', size.toString());\n    $bookmarkImg.className = \"bookmark-icon\";\n\n    // Link.\n    const $bookmarkLink = document.createElement(\"div\");\n    $bookmarkLink.innerText = bookmark.title;\n    $bookmarkLink.className = \"bookmark-link\";\n\n    $bookmark.appendChild($bookmarkImg);\n    $bookmark.appendChild($bookmarkLink);\n\n    return $bookmark;\n  }\n\n  async renderSearchBookmarks() {\n    const $container = $(\"bookmarks-search\");\n    // const $form = $(\"bookmarks-search-form\");\n    const $searchField = $(\"bookmarks-search-query\");\n    const $results = $(\"bookmarks-search-results\");\n    const $bookmarks = $(\"bookmarks\");\n\n    $container.style.display = 'block';\n\n    $searchField.addEventListener(\"focusin\", (e: Event) => {\n      (e.target as HTMLInputElement).setAttribute(\"placeholder\", \"\");\n    });\n    $searchField.addEventListener(\"focusout\", (e: Event) => {\n      (e.target as HTMLInputElement).setAttribute(\"placeholder\", \"Search my bookmarks ...\");\n    });\n\n    $searchField.addEventListener(\"input\", (e: Event) => {\n      const query = (e.target as HTMLInputElement).value.trim();\n      const bookmarksFound = this.bookmarks.search(query);\n\n      $results.innerHTML = '';\n      $bookmarks.classList.remove(\"blur\");\n\n      if (bookmarksFound && bookmarksFound.length > 0) {\n        bookmarksFound.forEach((bookmark) => {\n          const size = this.settings.getValue(\"bookmarkItemSize\") === \"large\" ? 32 : 16;\n          const $bookmark = this.renderBookmark(bookmark, size, false);\n          $results.appendChild($bookmark);\n        });\n\n        $results.style.display = 'block';\n        $bookmarks.classList.add(\"blur\");\n      }\n    });\n  }\n\n  async renderStartPageBookmarks() {\n    const $bookmarks = $(\"bookmarks\");\n    const $wrapper = $(\"wrapper\");\n    const startPageBookmarks = this.bookmarks.getStartPageBookmarks();\n\n    if (this.settings.getValue(\"firstRun\") || !startPageBookmarks) {\n      const $noBookmarksMsg = $(\"no-bookmarks-msg\");\n      $noBookmarksMsg.style.display = 'block';\n      return;\n    }\n\n    // Set CSS settings to the main wrapper (so we can paint conditionally later with CSS).\n    for (const settingName in this.settings.getAll()) {\n      $wrapper.classList.add(`${settingName}--${this.settings.getValue(settingName as keyof SettingsProps)}`);\n    }\n\n    // Render bookmarks items.\n    const treeNodeChildren = startPageBookmarks.children;\n    if (!treeNodeChildren) {\n      return;\n    }\n    treeNodeChildren.forEach((bookmark) => {\n      if (bookmark.children) {\n        return;\n      }\n\n      const size = this.settings.getValue(\"bookmarkItemSize\") === \"large\" ? 32 : 16;\n      const isDraggable = this.settings.getValue(\"bookmarksReordering\");\n      const $bookmark = this.renderBookmark(bookmark, size, isDraggable === BooleanSetting.YES);\n\n      $bookmarks.appendChild($bookmark);\n    });\n  }\n\n  preRenderSettingsDialog() {\n    const $settingsDialog = $<HTMLDialogElement>(\"settings-dialog\");\n    const $settingsLinks = $$q(\".settings-link\");\n\n    // Set form default values from Chrome's \"storage\".\n    $<HTMLInputElement>(\"settings-root-folder\").value = this.settings.getValue(\"rootFolderName\");\n    $<HTMLInputElement>(\"settings-bookmarks-width\").value = this.settings.getValue(\"bookmarksWidth\");\n    $<HTMLInputElement>(\"settings-bookmark-item-icon\").value = this.settings.getValue(\"bookmarkItemIcon\");\n    $<HTMLInputElement>(\"settings-bookmark-item-size\").value = this.settings.getValue(\"bookmarkItemSize\");\n    $<HTMLInputElement>(\"settings-show-subfolders\").value = this.settings.getValue(\"bookmarksShowSubfolders\");\n    $<HTMLInputElement>(\"settings-bookmark-reorder\").value = this.settings.getValue(\"bookmarksReordering\");\n    $<HTMLInputElement>(\"settings-bookmark-search-bar\").value = this.settings.getValue(\"bookmarksSearchBar\");\n\n    $settingsLinks.forEach(($settingsLink) => {\n      $settingsLink.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        $settingsDialog.showModal();\n      });\n    })\n\n\n    const $saveSettingsBtn = $(\"settings-save-btn\");\n    $saveSettingsBtn.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      this.settings.save({\n        rootFolderName: $<HTMLInputElement>(\"settings-root-folder\").value,\n        bookmarksWidth: $<HTMLInputElement>(\"settings-bookmarks-width\").value,\n        bookmarkItemIcon: $<HTMLInputElement>(\"settings-bookmark-item-icon\").value as BooleanSetting,\n        bookmarkItemSize: $<HTMLInputElement>(\"settings-bookmark-item-size\").value as SizeSetting,\n        bookmarksShowSubfolders: $<HTMLInputElement>(\"settings-show-subfolders\").value as BooleanSetting,\n        bookmarksReordering: $<HTMLInputElement>(\"settings-bookmark-reorder\").value as BooleanSetting,\n        bookmarksSearchBar: $<HTMLInputElement>(\"settings-bookmark-search-bar\").value as BooleanSetting,\n      }).then(() => {\n        $settingsDialog.close();\n        window.location.reload();\n      })\n    });\n  }\n\n  // debugSettings() {\n  //     $(\"bookmarks-settings-debug\").innerHTML = JSON.stringify(this.settings, null, 2);\n  // }\n\n  async render() {\n    // Bookmarks search bar.\n    if (\n      !this.settings.getValue(\"firstRun\") &&\n      this.settings.getValue(\"bookmarksSearchBar\") === 'yes'\n    ) {\n      await this.renderSearchBookmarks();\n    }\n    // Start Page bookmarks.\n    await this.renderStartPageBookmarks();\n    // Hidden \"Settings\" dialog.\n    this.preRenderSettingsDialog();\n    // await debugSettings(settings);\n  }\n\n}\n", "/**\n * \"Add bookmark\"\n */\n// function preRenderAddBookmarkDialog(bookmarks) {\n//     const $addBookmarkDialog = $(\"add-bookmark-dialog\");\n//     const $addBookmarkItem = $(\"add-bookmark-item\");\n//     $addBookmarkItem.addEventListener(\"click\", () => {\n//         $addBookmarkDialog.showModal();\n//     });\n//     const $addBookmarkBtn = $(\"add-bookmark-btn\");\n//     $addBookmarkBtn.addEventListener(\"click\", (e) => {\n//         e.preventDefault();\n//\n//         bookmarks.add(\n//             0,\n//             $(\"add-bookmark-title\").value.trim(),\n//             $(\"add-bookmark-url\").value.trim()\n//         ).then(() => {\n//             $addBookmarkDialog.close();\n//         });\n//     });\n// }\n\nimport {Settings} from \"./Settings\";\nimport {Bookmarks} from \"./Bookmarks\";\nimport {View} from \"./View\";\n\n/**\n * Bootstrap\n */\n(async () => {\n  const settings = await (new Settings()).init();\n  const bookmarks = await (new Bookmarks(settings)).init();\n  const view = new View(settings, bookmarks);\n  await view.render();\n})();\n\n\n"],
  "mappings": "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",
  "names": []
}
